/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

//import static PersonalHealth.UserMain.key;
//import abe.ABE;
//import abe.CPABEwatersEngine;
//import abe.CiphertextSerParameter;
//import acess.ParserUtils;
//import acess.PolicySyntaxException;
//import it.unisa.dia.gas.jpbc.Element;
//import it.unisa.dia.gas.jpbc.PairingParameters;
//import it.unisa.dia.gas.plaf.jpbc.pairing.PairingFactory;
//import it.unisa.dia.gas.plaf.jpbc.pairing.a.TypeACurveGenerator;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
//import serparams.PairingKeySerPair;
//import utils.PairingUtils;

/**
 *
 * @author maxpro
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form AdminMain
     */
    String uname,

    /**
     * Creates new form Server
     */
    upassword, 

    /**
     * Creates new form Server
     */
    bi, 

    /**
     * Creates new form Server
     */
    bi1, 

    /**
     * Creates new form Server
     */
    bi2, 

    /**
     * Creates new form Server
     */
    fname, 

    /**
     * Creates new form Server
     */
    filename, 

    /**
     * Creates new form Server
     */
    filecontent, 

    /**
     * Creates new form Server
     */
    filekey,

    /**
     * Creates new form Server
     */
    drname,

    /**
     * Creates new form Server
     */
    key;
    Connection conn = null;
    Vector msgsend = new Vector();
    Socket s1 = null;

    public Server() {
        initComponents();
    }

    public Socket ClientSocket() {
        try {
//        	
            String ipadd = "localhost";
            int portno = 1235;
            s1 = new Socket(ipadd, portno);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", 1);
            ex.printStackTrace();
        }
        return s1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Cambria Math", 3, 12)); // NOI18N
        jLabel1.setText("SERVER  PAGE");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(342, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(318, 318, 318))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(6, 6, 6))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SERVER", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria Math", 3, 12))); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void SocketConnection() {
        try {

            ServerSocket ss = null;
            Socket s1 = null, s2 = null;
            Vector clientreq = new Vector();
            ss = new ServerSocket(1234);
            System.out.println("server started");

            while (true) {

                s1 = ss.accept();
                System.out.println("client connected");
                ObjectInputStream ois = new ObjectInputStream(s1.getInputStream());
                clientreq = (Vector) ois.readObject();
                System.out.println("the client request is:" + clientreq);
                
                if (clientreq.contains("keyget")) {
                    
//                    String fn=clientreq.elementAt(1).toString();
//                    String sub=clientreq.elementAt(2).toString();
//                    String year=clientreq.elementAt(3).toString();
//                    String dep=clientreq.elementAt(4).toString();
//                    String filecon=clientreq.elementAt(5).toString();
//                    callkeygenenc(fn,sub,year,dep,filecon);
                }

                if (clientreq.contains("upload")) {

                    //   flagu = 1;
                    
                     String fn=clientreq.elementAt(1).toString();
                    String sub=clientreq.elementAt(2).toString();
                    String year=clientreq.elementAt(3).toString();
                    String dep=clientreq.elementAt(4).toString();
                    String filecon=clientreq.elementAt(5).toString();
                     String n=clientreq.elementAt(6).toString();
//                    callkeygenenc(fn,sub,year,dep,filecon,n);
//                    uname = clientreq.elementAt(1).toString();
//                    upassword = clientreq.elementAt(2).toString();
//                    bi = clientreq.elementAt(3).toString();
//                    jTextArea1.append("\nFile Name    : "+uname);
//                    jTextArea1.append("\nFile Key     : "+upassword);
//                    jTextArea1.append("\nFile Content : "+bi);
                    
                    
//                   
                }
                
                if (clientreq.contains("upload1")) {

                    //   flagu = 1;
                    uname = clientreq.elementAt(1).toString();
                    upassword = clientreq.elementAt(2).toString();
                  
                    jTextArea1.append("\n"+uname);
                    jTextArea1.append("\n"+upassword);
                   
                    
                    
//                   
                }
                
                if (clientreq.contains("upload2")) {

                    
                    uname = clientreq.elementAt(1).toString();
                    upassword = clientreq.elementAt(2).toString();
                    jTextArea1.append("\n"+uname);
                    jTextArea1.append("\n"+upassword);
                     
                }
                
                if (clientreq.contains("upload3")) {

                    
                    uname = clientreq.elementAt(1).toString();
                    upassword = clientreq.elementAt(2).toString();
                    jTextArea1.append("\n"+uname);
                    jTextArea1.append("\n"+upassword);
                     
                }
                 if (clientreq.contains("upload4")) {

                    
                    uname = clientreq.elementAt(1).toString();
                    upassword = clientreq.elementAt(2).toString();
                    jTextArea1.append("\n"+uname);
                    jTextArea1.append("\n"+upassword);
                     
                }
                
                if (clientreq.contains("req")) {
                    System.out.println("hi1");
                    String name = clientreq.elementAt(1).toString();
                    String uname = clientreq.elementAt(2).toString();
                    filename = clientreq.elementAt(3).toString();
                    filekey = clientreq.elementAt(4).toString();
                    System.out.println(name + " " + filename + " " + filekey);
//                    DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel();
//                    model1.addRow(new Object[]{name.toString(),uname.toString(), filename.toString(), "req".toString()});
                    System.out.println("hi1");
                    //  uservalidfunction(username, password);

                }

            }

        } catch (Exception e1) {
            JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", 1);
            System.out.println(e1);
        }
    }
    
    void calldemo(String fn,String sub,String year,String dep,String filecon,String n)
    {
//        CPABEwatersEngine abe=new CPABEwatersEngine();
//        int rBits = 160; //Group order
//	 int qBits = 512; // The order of zq.
//	 TypeACurveGenerator pg = new TypeACurveGenerator(rBits, qBits); //Specify the type of elliptic curve typeA
//	 PairingParameters typeAParams = pg.generate();
//	
//	 String []deparray=dep.split(",");
//         System.out.print(deparray[0]+" "+deparray[1]);
//	 
//	 System.out.println("Encryption mechanism："+abe.getEngineName());
//	 System.out.print("\n");
//	 
//	 
//	 //Attribute domain
//	// String[] attributeUniverse= {"Hegong University","Xuancheng Campus","Emerald Lake Campus","IT Academy","School of Mechanical Engineering","School of Vehicle Engineering"};
//	 String[] attributeUniverse= {sub,year,deparray[0],deparray[1]};
//	 
//	 //Maximum number of attributes
//	 int maxNumAttributes=4;
//	 
//	 /*print*/
//	 jTextArea1.append("Attribute domain：");
//	 
//	 for(String str:attributeUniverse) {
//		 jTextArea1.append(str+" ");
//	 }
//	 jTextArea1.append("\n");
//	 /*print*/
//	 
//	 
//	 //SetUp algorithm
//	 PairingKeySerPair KeyPair=abe.setup(typeAParams, maxNumAttributes,attributeUniverse);
//	
//	 //Access strategy
//	// String AccessPolicy="(Hegong University AND ( IT Academy AND (Emerald Lake Campus OR Xuancheng Campus)))";
//	//{sub,year,deparray[0],deparray[1]};
//        String AccessPolicy="("+sub+" AND ("+ year+" AND ("+ deparray[0]+" OR "+deparray[1]+")))";
//     //    String AccessPolicy="( A AND ( B OR (C) ))";
//         
//	 int[][] accesspolicy = null;
//	 
//	 //Generate strategy matrix
//	 try {
//		 accesspolicy=ParserUtils.GenerateAccessPolicy(AccessPolicy);
//	} catch (PolicySyntaxException e) {
//		// TODO Auto-generated catch block
//		e.printStackTrace();
//	}
//	 //Ciphertext attributes
//	 String[] rhos=new String[accesspolicy.length];
//	 try {
//		rhos=ParserUtils.GenerateRhos(AccessPolicy);
//	} catch (PolicySyntaxException e) {
//		// TODO Auto-generated catch block
//		e.printStackTrace();
//	}
//
//	 /*print*/
//	 jTextArea1.append("Access control strategy："+AccessPolicy+"\n");
//	 System.out.println("Access control matrix structure：");
//     for(int i=0;i<accesspolicy.length;i++) {
//		 for(int j=0;j<accesspolicy[i].length;j++)
//		 {
//			 System.out.print(accesspolicy[i][j]+"\t");
//		 }
//		 System.out.print("\n");
//	 }
//     System.out.print("\n");
//     /*print*/
//	 
//     //Plaintext
//	 String message= filecon;//"Ciphertext-policy attribute-based encryption: An expressive, efficient, and provably secure realization";
//	 Element elementMessage=PairingUtils.MapStringToGroup(PairingFactory.getPairing(typeAParams), message, PairingUtils.PairingGroupType.GT).getImmutable();
//	 Map<Element,String> PT=new HashMap<Element,String >();
//	 PT.put(elementMessage,message);
//	 System.out.println("PlainText："+message);
//	 System.out.print("\n");
//	 //Encryption algorithm
//	 CiphertextSerParameter Cipher=abe.encryption(KeyPair.getPublic(), accesspolicy, rhos, elementMessage);
//     jTextArea1.append("Ciphertext："+Cipher.getC().toString()+"\n");
//	System.out.print("\n");
    }
    
//    String calldemo1(String fn,String sub,String year,String dep,String filecon,String n)
//    {
//        CPABEwatersEngine abe=new CPABEwatersEngine();
//        int rBits = 160; //Group order
//	 int qBits = 512; // The order of zq.
//	 TypeACurveGenerator pg = new TypeACurveGenerator(rBits, qBits); //Specify the type of elliptic curve typeA
//	 PairingParameters typeAParams = pg.generate();
//	
//	 String []deparray=dep.split(",");
//         System.out.print(deparray[0]+" "+deparray[1]);
//	 
//	 System.out.println("Encryption mechanism："+abe.getEngineName());
//	 System.out.print("\n");
//	 
//	 
//	 //Attribute domain
//	// String[] attributeUniverse= {"Hegong University","Xuancheng Campus","Emerald Lake Campus","IT Academy","School of Mechanical Engineering","School of Vehicle Engineering"};
//	 String[] attributeUniverse= {sub,year,deparray[0],deparray[1]};
//	 
//	 //Maximum number of attributes
//	 int maxNumAttributes=4;
//	 
//	 /*print*/
//	 jTextArea1.append("Attribute domain：");
//	 
//	 for(String str:attributeUniverse) {
//		 jTextArea1.append(str+" ");
//	 }
//	 jTextArea1.append("\n");
//	 /*print*/
//	 
//	 
//	 //SetUp algorithm
//	 PairingKeySerPair KeyPair=abe.setup(typeAParams, maxNumAttributes,attributeUniverse);
//	
//	 //Access strategy
//	// String AccessPolicy="(Hegong University AND ( IT Academy AND (Emerald Lake Campus OR Xuancheng Campus)))";
//	//{sub,year,deparray[0],deparray[1]};
//        String AccessPolicy="("+sub+" AND ("+ year+" AND ("+ deparray[0]+" OR "+deparray[1]+")))";
//     //    String AccessPolicy="( A AND ( B OR (C) ))";
//         
//	 int[][] accesspolicy = null;
//	 
//	 //Generate strategy matrix
//	 try {
//		 accesspolicy=ParserUtils.GenerateAccessPolicy(AccessPolicy);
//	} catch (PolicySyntaxException e) {
//		// TODO Auto-generated catch block
//		e.printStackTrace();
//	}
//	 //Ciphertext attributes
//	 String[] rhos=new String[accesspolicy.length];
//	 try {
//		rhos=ParserUtils.GenerateRhos(AccessPolicy);
//	} catch (PolicySyntaxException e) {
//		// TODO Auto-generated catch block
//		e.printStackTrace();
//	}
//
//	 /*print*/
//	 jTextArea1.append("Access control strategy："+AccessPolicy+"\n");
//	 System.out.println("Access control matrix structure：");
//     for(int i=0;i<accesspolicy.length;i++) {
//		 for(int j=0;j<accesspolicy[i].length;j++)
//		 {
//			 System.out.print(accesspolicy[i][j]+"\t");
//		 }
//		 System.out.print("\n");
//	 }
//     System.out.print("\n");
//     /*print*/
//	 
//     //Plaintext
//	 String message= filecon;//"Ciphertext-policy attribute-based encryption: An expressive, efficient, and provably secure realization";
//	 Element elementMessage=PairingUtils.MapStringToGroup(PairingFactory.getPairing(typeAParams), message, PairingUtils.PairingGroupType.GT).getImmutable();
//	 Map<Element,String> PT=new HashMap<Element,String >();
//	 PT.put(elementMessage,message);
//	 System.out.println("PlainText："+message);
//	 System.out.print("\n");
//	 //Encryption algorithm
//	 CiphertextSerParameter Cipher=abe.encryption(KeyPair.getPublic(), accesspolicy, rhos, elementMessage);
//     jTextArea1.append("Ciphertext："+Cipher.getC().toString()+"\n");
//	System.out.print("\n");
//        return AccessPolicy;
//    }
//
//    void callkeygenenc(String fn,String sub,String year,String dep,String filecon,String n)
//    {
//        CPABEwatersEngine abe=new CPABEwatersEngine();
//	 jTextArea1.append("File Name : "+fn+"\n");
//         jTextArea1.append("File Content : "+filecon+"\n");
//	 //Set pairing type
//         String s1a = filecon.substring(0, (filecon.length()/2));
//         
//         calldemo(fn,sub,year,dep,s1a,n);
//         
//         String s1b = filecon.substring((filecon.length()/2));
//         
//	 String AccessPolicy=calldemo1(fn,sub,year,dep,s1b,n);
//        
//         try {
//             
//            Class.forName("com.mysql.jdbc.Driver");
//            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/encloud", "root", "");
//            Statement stmt = (Statement) conn.createStatement();
//            
//             String insert = "INSERT INTO fileinfo VALUES('" + fn + "','D:/DataSet','"+AccessPolicy+"','"+n+"');";
//             stmt.executeUpdate(insert);
//        } catch (Exception e) {
//            System.out.println("view owner 1" + e);
//            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", 1);
//
//        }
//        
        
//    }
    
    
    void calltabel1(String uname, String upassword, String bi11, String bi22, String fname,String d,String k) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/personalhealth", "root", "");
            Statement stmt = (Statement) conn.createStatement();
            String insert = "INSERT INTO fileinfo VALUES('" + uname + "','" + upassword + "','" + bi11 + "','" + fname + "');";
            String insert1 = "INSERT INTO tempinfo VALUES('" + uname + "','" + upassword + "','" + bi22 + "','" + fname + "');";
            String insert2 = "INSERT INTO pdetail VALUES('" + uname + "','" + fname + "','" + k + "','" + d + "');";
            stmt.executeUpdate(insert);
            stmt.executeUpdate(insert1);
            stmt.executeUpdate(insert2);
        } catch (Exception e) {
            System.out.println("view owner 1" + e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", 1);

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Server().setVisible(true);
//            }
//        });
        Server am = new Server();
        am.setVisible(true);
        am.SocketConnection();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
